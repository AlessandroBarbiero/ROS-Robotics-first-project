Barbiero Alessandro (10692413)
Borsatto Andrea (10628989)
... Leonardo (...)

STRUCTURE OF THE PACKAGE:
We provided a package containing different folders:
- cfg: containing the python file for the dynamic reconfigure of the integration type; this file contains an enum with the two possible type of integration, the default one is Euler integration

- launch: containing the launch file of the project that starts the bag, all the necessary nodes and rviz ...(AGGIUNGERE QUALCOSA ANCORA)...

- msg: containing our custom messages:
	> CustomOdometry.msg is the structure of the message that publishes the computed odometry and the integration method that has been chosen
	> Speed.msg is the structure of the message that publishes the linear velocity, in m/s, of the wheels. It contains also a header for synchronization

- rviz: containing the custom configuration of rviz for easy visualization

- srv: containing the two services:
	> reset.srv that resets the x and y positions of the robot to 0
	> reset_general.srv that changes the pose of the robot to the one sent by the request message

- src: containing the files of the nodes:
	> LateralWheelSync: this node is used to synchronize the messages coming from motors on one side of the robot;
	    it synchronizes the messages, computes the average of the RPMs of the motors and then computes
	    the linear velocity of the corresponding wheel in differential drive approximation; finally it publishes a custom message of type "Speed" on a topic.
	    This node is launched two times inside the launch file (with appropriate remaps for the topics) because it is used to synchronize
	    the velocities on the two sides of the skid steering robot and to publish them into "/syncVelocity_l" and "/syncVelocity_r" topics
	
	> GlobalSync: this node is used to synchronize the messages published by the two LateralWheelSync nodes on
	    "/syncVelocity_l" and "/syncVelocity_r" topics, in order to compute the values of the linear and the angular velocities of the robot
	     (using the skid steering approximate kinematics) and to publish them as a "TwistStamped" message.
	
	> AgileXCore: this node is used to compute the odometry of the robot, to publish all the related messages and to expose the two services mentioned before.
	    The node reads the "TwistStamped" messages published by GlobalSync node and, based on the value of the param "integration",
	    it computes the odometry of the robot using Euler or Runge-Kutta integration. After this it publishes the odometry on a topic and publishes the tf transformation.
		For the integration type, the node uses the dynamic reconfigure to set the integration type; the default value is "Euler"
		and whenever the user changes the param a callback is executed, changing the value of the field "integrationType" of the class Pub_Sub_Odometry.
		The node exposes also two callbacks for the two services: "resetZero", that set the x and y positions to 0 when the user calls the service;
		and "resetGeneral", that set the pose of the robot equal to the value x, y and theta that the user passes when calls the service.
		The node read the initial pose of the robot from the params declared in the launch file and sets the x, y and theta of the robot
	
	> BaselineCalculator: this node is a utility node built for calculating the apparent baseline for the approximation of the skid steering kinematics.
	    It calculates the baseline synchronizing the messages from "/syncVelocity_l", "/syncVelocity_r", and "/scout_odom" and using the inverse formula for calculus of the angular velocity.
	    In order to exclude biased values, the baseline is calculated like the average of the calculated baselines only for value of angular velocity > 0.005.
	    The outcome of this calculation is an apparent baseline of 1.129 m.


ROSPARAMS:
We used rosParameters for the integration type, named "integration"; we created an enum with two integer values: "Euler" = 0 and "Runge_Kutta" = 1
We also used rosParameters in the launch file to set the initial pose of the robot; AgileXCore node reads the parameters and sets x,y,theta in the in the constructor of Pub_sub_odometry.
 We decided to use 3 params: "InitialX", "InitialY" and "InitialTheta", all set to zero, for different initialization the user can change the parameters in the launch file or call the apposite service.


TF TREE:
...

CUSTOM MESSAGES:
As previously discussed we used two custom messages:
	> CustomOdometry, that is used in AgileXCore node to publish the odometry computed with the associated integration type.
		It is composed by a nav_msgs/Odometry and a std_msgs/String
	 
	> Speed, that is used in LateralWheelSync to publish the linear velocity of the wheel on one side of the robot.
		It is composed by a header, for the synchronization, and a float64 for the value of the velocity (in m/s)

HOW TO RUN:
...

	







